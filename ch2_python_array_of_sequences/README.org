* An Array of Sequence

** Category of Sequences

*** container vs flat

**** container: can hold items of different types via reference
     
- e.g. list, tuple ...

**** flat: hold items of one type via value

- e.g. str, bytes ... 
  
*** mutable vs immutable

**** mutable: list, deque, ...

**** immutable: tuple, str and bytes
     
** List

- mutable and container
  
*** List Comprehension
    
*** Generator Expression

** Tuple    
   
- immutable list + records with no field names
  
** Slicing

- Why the last item is excluded ? i.e. why [0:2] gives item 0 and 1
  
  Three advantages of excluding the last item
  
  - easy to get the length of the range / slice
    
    - [:3] gives three items

    - [1:2] gives 3 - 1 = 2 items
      
  - easy to split sequence into two parts without overlapping

    - [:x] and [x:]
      
** Multidimensional Slicing
   
- [] taking multiple indexes or slices separated by commas
  
- can use ellipsis to omit some dimensions (?)
  
** Augmented Assignment
   
- implemented via iadd / imul dunder method
  
  - in-place

  - if not implemented (all immutable objects), falls back to add dunder method
    
    - will need to create a new object
      
** List Sort

- *Python convention:* functions that change objects in-place should return None to remind that
  
*** list.sort

- in-place

*** sorted() (built-in)
    
- accepting any iterable argument
    
- creating a new object (sorted) and returning it
  
*** Optional Arguments
    
- reverse

- key

  - one-argument function

  - applied to each item to generate its sorting key
    
** List may not be the ansewr

*** Case 1: storing 10 million float objects

- array is better because it only holds the bytes representing float's machine values, *not* the actual float objects
  
*** Case 2: constantly doing FIFO (adding/removing from the ends)
  
- double-ended queue (deque) is faster
  
*** Case 3: lots of containment checks

- sets work faster as they are optimized for fast membership checking
  
** Array
   
- as lean as C array
  
** Memory Views
   
** Deques
   
- inserting and removing from the left of a list is costly --> requiring the entire list to be shifted
  
- deque

  - easy to add/remove from both ends (optimized for this)

    cost: not as fast to remove elements form middle of a deque

  - can be declared with limited length
